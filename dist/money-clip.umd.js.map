{"version":3,"file":"money-clip.umd.js","sources":["../idb-keyval-new.js","../index.js"],"sourcesContent":["export class Store {\n    constructor(dbName = 'keyval-store', storeName = 'keyval') {\n        this.storeName = storeName;\n        this._dbp = new Promise((resolve, reject) => {\n            const openreq = indexedDB.open(dbName, 1);\n            openreq.onerror = () => reject(openreq.error);\n            openreq.onsuccess = () => resolve(openreq.result);\n            // First time setup: create an empty object store\n            openreq.onupgradeneeded = () => {\n                openreq.result.createObjectStore(storeName);\n            };\n        });\n    }\n    _withIDBStore(type, callback) {\n        return this._dbp.then(db => new Promise((resolve, reject) => {\n            const transaction = db.transaction(this.storeName, type);\n            transaction.oncomplete = () => resolve();\n            transaction.onabort = transaction.onerror = () => reject(transaction.error);\n            callback(transaction.objectStore(this.storeName));\n        }));\n    }\n}\nlet store;\nfunction getDefaultStore() {\n    if (!store)\n        store = new Store();\n    return store;\n}\nexport function get(key, store = getDefaultStore()) {\n    let req;\n    return store._withIDBStore('readonly', store => {\n        req = store.get(key);\n    }).then(() => req.result);\n}\nexport function set(key, value, store = getDefaultStore()) {\n    return store._withIDBStore('readwrite', store => {\n        store.put(value, key);\n    });\n}\nexport function del(key, store = getDefaultStore()) {\n    return store._withIDBStore('readwrite', store => {\n        store.delete(key);\n    });\n}\nexport function clear(store = getDefaultStore()) {\n    return store._withIDBStore('readwrite', store => {\n        store.clear();\n    });\n}\nexport function keys(store = getDefaultStore()) {\n    const keys = [];\n    return store._withIDBStore('readonly', store => {\n        // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n        // And openKeyCursor isn't supported by Safari.\n        (store.openKeyCursor || store.openCursor).call(store).onsuccess = function () {\n            if (!this.result)\n                return;\n            keys.push(this.result.key);\n            this.result.continue();\n        };\n    }).then(() => keys);\n}\n","import * as idbKeyVal from './idb-keyval-new'\n// pass-through exports\nexport const { del, clear, keys } = idbKeyVal\n\nconst defaultOpts = { maxAge: Infinity, version: 0, lib: idbKeyVal }\nconst getOpts = passedOptions => Object.assign({}, defaultOpts, passedOptions)\n\nexport const get = (key, opts, store) => {\n  const { maxAge, version, lib } = getOpts(opts)\n  return lib\n    .get(key, store)\n    .then(JSON.parse)\n    .then(parsed => {\n      const age = Date.now() - parsed.time\n      if (age > maxAge || version !== parsed.version) {\n        lib.del(key, store)\n        return null\n      }\n      return parsed.data\n    })\n    .catch(() => null)\n}\n\nexport const set = (key, data, spec, store) => {\n  const { lib, version } = getOpts(spec)\n  return lib\n    .set(\n      key,\n      JSON.stringify({\n        version,\n        time: Date.now(),\n        data\n      }),\n      store\n    )\n    .catch(() => null)\n}\n\nexport const getAll = (spec, store) => {\n  const opts = getOpts(spec)\n  let keys\n  return opts.lib\n    .keys(store)\n    .then(retrievedKeys => {\n      keys = retrievedKeys\n      return Promise.all(keys.map(key => get(key, opts, store)))\n    })\n    .then(data =>\n      data.reduce((acc, bundleData, index) => {\n        if (bundleData) {\n          acc[keys[index]] = bundleData\n        }\n        return acc\n      }, {})\n    )\n    .catch(() => {})\n}\n\nexport const getConfiguredCache = spec => {\n  const opts = getOpts(spec)\n  let store\n  if (opts.name) {\n    store = new idbKeyVal.Store(opts.name, opts.name)\n  }\n  return {\n    get: key => get(key, opts, store),\n    set: (key, val) => set(key, val, opts, store),\n    getAll: () => getAll(opts, store),\n    del: () => opts.lib.del(store),\n    clear: () => opts.lib.clear(store),\n    keys: () => opts.lib.keys(store)\n  }\n}\n"],"names":["store","Store","dbName","storeName","this","_dbp","Promise","resolve","reject","const","openreq","indexedDB","open","onerror","error","onsuccess","result","onupgradeneeded","createObjectStore","getDefaultStore","del","key","_withIDBStore","delete","type","callback","then","db","transaction","oncomplete","onabort","objectStore","defaultOpts","maxAge","Infinity","version","lib","let","req","get","value","put","clear","keys","openKeyCursor","openCursor","call","push","continue","getOpts","passedOptions","Object","assign","opts","JSON","parse","parsed","Date","now","time","data","catch","set","spec","stringify","getAll","retrievedKeys","all","map","reduce","acc","bundleData","index","name","idbKeyVal.Store","val"],"mappings":"+KAAO,IAsBHA,EAtBSC,EACT,SAAYC,EAAyBC,kBAAhB,+BAA4B,UAC7CC,KAAKD,UAAYA,EACjBC,KAAKC,KAAO,IAAIC,iBAASC,EAASC,GAC9BC,IAAMC,EAAUC,UAAUC,KAAKV,EAAQ,GACvCQ,EAAQG,0BAAgBL,EAAOE,EAAQI,QACvCJ,EAAQK,4BAAkBR,EAAQG,EAAQM,SAE1CN,EAAQO,6BACID,OAAOE,kBAAkBf,OAcjD,SAASgB,IAGL,OAFKnB,IACDA,EAAQ,IAAIC,GACTD,EAaJ,SAASoB,EAAIC,EAAKrB,GACrB,sBAD6BmB,KACtBnB,EAAMsB,cAAc,qBAAatB,GACpCA,EAAMuB,OAAOF,iBA5BjBC,uBAAcE,EAAMC,cAChB,OAAOrB,KAAKC,KAAKqB,cAAKC,UAAM,IAAIrB,iBAASC,EAASC,GAC9CC,IAAMmB,EAAcD,EAAGC,YAAYxB,EAAKD,UAAWqB,KACvCK,6BAAmBtB,OACnBuB,QAAUF,EAAYf,0BAAgBL,EAAOoB,EAAYd,UAC5Dc,EAAYG,YAAY3B,EAAKD,qBCd5C6B,GAAgBC,OAAQC,SAAUC,QAAS,EAAGC,iBDwB7C,SAAaf,EAAKrB,GACrBqC,IAAIC,EACJ,sBAF6BnB,KAEtBnB,EAAMsB,cAAc,oBAAYtB,GACnCsC,EAAMtC,EAAMuC,IAAIlB,KACjBK,uBAAWY,EAAItB,cAEf,SAAaK,EAAKmB,EAAOxC,GAC5B,sBADoCmB,KAC7BnB,EAAMsB,cAAc,qBAAatB,GACpCA,EAAMyC,IAAID,EAAOnB,kBAQlB,SAAerB,GAClB,sBAD0BmB,KACnBnB,EAAMsB,cAAc,qBAAatB,GACpCA,EAAM0C,gBAGP,SAAc1C,kBAAQmB,KACzBV,IAAMkC,KACN,OAAO3C,EAAMsB,cAAc,oBAAYtB,IAGlCA,EAAM4C,eAAiB5C,EAAM6C,YAAYC,KAAK9C,GAAOe,UAAY,WACzDX,KAAKY,SAEV2B,EAAKI,KAAK3C,KAAKY,OAAOK,KACtBjB,KAAKY,OAAOgC,eAEjBtB,uBAAWiB,OCvDZM,WAAUC,UAAiBC,OAAOC,UAAWpB,EAAakB,IAEnDX,WAAOlB,EAAKgC,EAAMrD,GAC7B,MAAiCiD,EAAQI,kCACzC,OAAOjB,EACJG,IAAIlB,EAAKrB,GACT0B,KAAK4B,KAAKC,OACV7B,cAAK8B,GAEJ,OADYC,KAAKC,MAAQF,EAAOG,KACtB1B,GAAUE,IAAYqB,EAAOrB,SACrCC,EAAIhB,IAAIC,EAAKrB,GACN,MAEFwD,EAAOI,OAEfC,wBAAY,QAGJC,WAAOzC,EAAKuC,EAAMG,EAAM/D,GACnC,MAAyBiD,EAAQc,GACjC,aACGD,IACCzC,EACAiC,KAAKU,6BAEHL,KAAMF,KAAKC,WACXE,IAEF5D,GAED6D,wBAAY,QAGJI,WAAUF,EAAM/D,GAC3BS,IACIkC,EADEU,EAAOJ,EAAQc,GAErB,OAAOV,EAAKjB,IACTO,KAAK3C,GACL0B,cAAKwC,GAEJ,OADAvB,EAAOuB,EACA5D,QAAQ6D,IAAIxB,EAAKyB,aAAI/C,UAAOkB,EAAIlB,EAAKgC,EAAMrD,QAEnD0B,cAAKkC,UACJA,EAAKS,gBAAQC,EAAKC,EAAYC,GAI5B,OAHID,IACFD,EAAI3B,EAAK6B,IAAUD,GAEdD,SAGVT,sFAG6BE,GAChCtD,IACIT,EADEqD,EAAOJ,EAAQc,GAKrB,OAHIV,EAAKoB,OACPzE,EAAQ,IAAI0E,EAAgBrB,EAAKoB,KAAMpB,EAAKoB,QAG5ClC,aAAKlB,UAAOkB,EAAIlB,EAAKgC,EAAMrD,IAC3B8D,aAAMzC,EAAKsD,UAAQb,EAAIzC,EAAKsD,EAAKtB,EAAMrD,IACvCiE,yBAAcA,EAAOZ,EAAMrD,IAC3BoB,sBAAWiC,EAAKjB,IAAIhB,IAAIpB,IACxB0C,wBAAaW,EAAKjB,IAAIM,MAAM1C,IAC5B2C,uBAAYU,EAAKjB,IAAIO,KAAK3C"}