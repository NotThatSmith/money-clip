{"version":3,"file":"money-clip.js","sources":["../idb-keyval.js","../index.js"],"sourcesContent":["var Store = /** @class */ (function () {\n    function Store(dbName, storeName) {\n        if (dbName === void 0) { dbName = 'keyval-store'; }\n        if (storeName === void 0) { storeName = 'keyval'; }\n        this.storeName = storeName;\n        this._dbp = new Promise(function (resolve, reject) {\n            var openreq = indexedDB.open(dbName, 1);\n            openreq.onerror = function () { return reject(openreq.error); };\n            openreq.onsuccess = function () { return resolve(openreq.result); };\n            // First time setup: create an empty object store\n            openreq.onupgradeneeded = function () {\n                openreq.result.createObjectStore(storeName);\n            };\n        });\n    }\n    Store.prototype._withIDBStore = function (type, callback) {\n        var _this = this;\n        return this._dbp.then(function (db) { return new Promise(function (resolve, reject) {\n            var transaction = db.transaction(_this.storeName, type);\n            transaction.oncomplete = function () { return resolve(); };\n            transaction.onabort = transaction.onerror = function () { return reject(transaction.error); };\n            callback(transaction.objectStore(_this.storeName));\n        }); });\n    };\n    return Store;\n}());\nexport { Store };\nvar store;\nfunction getDefaultStore() {\n    if (!store)\n        store = new Store();\n    return store;\n}\nexport function get(key, store) {\n    if (store === void 0) { store = getDefaultStore(); }\n    var req;\n    return store._withIDBStore('readonly', function (store) {\n        req = store.get(key);\n    }).then(function () { return req.result; });\n}\nexport function set(key, value, store) {\n    if (store === void 0) { store = getDefaultStore(); }\n    return store._withIDBStore('readwrite', function (store) {\n        store.put(value, key);\n    });\n}\nexport function del(key, store) {\n    if (store === void 0) { store = getDefaultStore(); }\n    return store._withIDBStore('readwrite', function (store) {\n        store.delete(key);\n    });\n}\nexport function clear(store) {\n    if (store === void 0) { store = getDefaultStore(); }\n    return store._withIDBStore('readwrite', function (store) {\n        store.clear();\n    });\n}\nexport function keys(store) {\n    if (store === void 0) { store = getDefaultStore(); }\n    var keys = [];\n    return store._withIDBStore('readonly', function (store) {\n        // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n        // And openKeyCursor isn't supported by Safari.\n        (store.openKeyCursor || store.openCursor).call(store).onsuccess = function () {\n            if (!this.result)\n                return;\n            keys.push(this.result.key);\n            this.result.continue();\n        };\n    }).then(function () { return keys; });\n}\n","import * as idbKeyVal from './idb-keyval'\n\n// pass-through exports\nexport const { del, clear, keys } = idbKeyVal\n\nconst defaultOpts = { maxAge: Infinity, version: 0, lib: idbKeyVal }\nconst getOpts = passedOptions => Object.assign({}, defaultOpts, passedOptions)\n\nexport const get = (key, opts, store) => {\n  const { maxAge, version, lib } = getOpts(opts)\n  return lib\n    .get(key, store)\n    .then(JSON.parse)\n    .then(parsed => {\n      const age = Date.now() - parsed.time\n      if (age > maxAge || version !== parsed.version) {\n        lib.del(key, store)\n        return null\n      }\n      return parsed.data\n    })\n    .catch(() => null)\n}\n\nexport const set = (key, data, spec, store) => {\n  const { lib, version } = getOpts(spec)\n  return lib\n    .set(\n      key,\n      JSON.stringify({\n        version,\n        time: Date.now(),\n        data\n      }),\n      store\n    )\n    .catch(() => null)\n}\n\nexport const getAll = (spec, store) => {\n  const opts = getOpts(spec)\n  let keys\n  return opts.lib\n    .keys(store)\n    .then(retrievedKeys => {\n      keys = retrievedKeys\n      return Promise.all(keys.map(key => get(key, opts, store)))\n    })\n    .then(data =>\n      data.reduce((acc, bundleData, index) => {\n        if (bundleData) {\n          acc[keys[index]] = bundleData\n        }\n        return acc\n      }, {})\n    )\n    .catch(() => {})\n}\n\nexport const getConfiguredCache = spec => {\n  const opts = getOpts(spec)\n  let store\n  if (opts.name) {\n    store = new idbKeyVal.Store(opts.name, opts.name)\n  }\n  return {\n    get: key => get(key, opts, store),\n    set: (key, val) => set(key, val, opts, store),\n    getAll: () => getAll(opts, store),\n    del: () => opts.lib.del(store),\n    clear: () => opts.lib.clear(store),\n    keys: () => opts.lib.keys(store)\n  }\n}\n"],"names":["store","Store","dbName","storeName","this","_dbp","Promise","resolve","reject","openreq","indexedDB","open","onerror","error","onsuccess","result","onupgradeneeded","createObjectStore","prototype","_withIDBStore","type","callback","_this","then","db","transaction","oncomplete","onabort","objectStore","getDefaultStore","del","key","delete","defaultOpts","maxAge","Infinity","version","lib","req","get","value","put","clear","keys","openKeyCursor","openCursor","call","push","continue","getOpts","passedOptions","Object","assign","opts","JSON","parse","parsed","Date","now","time","data","catch","set","spec","stringify","getAll","const","retrievedKeys","all","map","reduce","acc","bundleData","index","name","idbKeyVal.Store","val"],"mappings":"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"}