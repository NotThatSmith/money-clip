{"version":3,"file":"money-clip.js","sources":["../index.js"],"sourcesContent":["import * as idbKeyVal from 'idb-keyval'\n\n// pass-through exports\nexport const { del, clear, keys } = idbKeyVal\n\nconst defaultOpts = { maxAge: Infinity, version: 0, lib: idbKeyVal }\nconst getOpts = passedOptions => Object.assign({}, defaultOpts, passedOptions)\n\nexport const get = (key, opts, store) => {\n  const { maxAge, version, lib } = getOpts(opts)\n  return lib\n    .get(key, store)\n    .then(JSON.parse)\n    .then(parsed => {\n      const age = Date.now() - parsed.time\n      if (age > maxAge || version !== parsed.version) {\n        lib.del(key, store)\n        return null\n      }\n      return parsed.data\n    })\n    .catch(() => null)\n}\n\nexport const set = (key, data, spec, store) => {\n  const { lib, version } = getOpts(spec)\n  return lib\n    .set(\n      key,\n      JSON.stringify({\n        version,\n        time: Date.now(),\n        data\n      }),\n      store\n    )\n    .catch(() => null)\n}\n\nexport const getAll = (spec, store) => {\n  const opts = getOpts(spec)\n  let keys\n  return opts.lib\n    .keys(store)\n    .then(retrievedKeys => {\n      keys = retrievedKeys\n      return Promise.all(keys.map(key => get(key, opts, store)))\n    })\n    .then(data =>\n      data.reduce((acc, bundleData, index) => {\n        if (bundleData) {\n          acc[keys[index]] = bundleData\n        }\n        return acc\n      }, {})\n    )\n    .catch(() => {})\n}\n\nexport const getConfiguredCache = spec => {\n  const opts = getOpts(spec)\n  let store\n  if (opts.name) {\n    store = new idbKeyVal.Store(opts.name, opts.name)\n  }\n  return {\n    get: key => get(key, opts, store),\n    set: (key, val) => set(key, val, opts, store),\n    getAll: () => getAll(opts, store),\n    del: () => opts.lib.del(store),\n    clear: () => opts.lib.clear(store),\n    keys: () => opts.lib.keys(store)\n  }\n}\n"],"names":["defaultOpts","maxAge","Infinity","version","lib","idbKeyVal","getOpts","passedOptions","Object","assign","get","key","opts","store","then","JSON","parse","parsed","Date","now","time","del","data","catch","set","spec","stringify","getAll","const","keys","retrievedKeys","Promise","all","map","reduce","acc","bundleData","index","name","idbKeyVal.Store","val","clear"],"mappings":"4BAKMA,GAAgBC,OAAQC,SAAUC,QAAS,EAAGC,IAAKC,GACnDC,WAAUC,UAAiBC,OAAOC,UAAWT,EAAaO,IAEnDG,WAAOC,EAAKC,EAAMC,GAC7B,MAAiCP,EAAQM,kCACzC,OAAOR,EACJM,IAAIC,EAAKE,GACTC,KAAKC,KAAKC,OACVF,cAAKG,GAEJ,OADYC,KAAKC,MAAQF,EAAOG,KACtBnB,GAAUE,IAAYc,EAAOd,SACrCC,EAAIiB,IAAIV,EAAKE,GACN,MAEFI,EAAOK,OAEfC,wBAAY,QAGJC,WAAOb,EAAKW,EAAMG,EAAMZ,GACnC,MAAyBP,EAAQmB,GACjC,aACGD,IACCb,EACAI,KAAKW,6BAEHN,KAAMF,KAAKC,WACXG,IAEFT,GAEDU,wBAAY,QAGJI,WAAUF,EAAMZ,GAC3Be,IACIC,EADEjB,EAAON,EAAQmB,GAErB,OAAOb,EAAKR,IACTyB,KAAKhB,GACLC,cAAKgB,GAEJ,OADAD,EAAOC,EACAC,QAAQC,IAAIH,EAAKI,aAAItB,UAAOD,EAAIC,EAAKC,EAAMC,QAEnDC,cAAKQ,UACJA,EAAKY,gBAAQC,EAAKC,EAAYC,GAI5B,OAHID,IACFD,EAAIN,EAAKQ,IAAUD,GAEdD,SAGVZ,wHAG6BE,GAChCG,IACIf,EADED,EAAON,EAAQmB,GAKrB,OAHIb,EAAK0B,OACPzB,EAAQ,IAAI0B,QAAgB3B,EAAK0B,KAAM1B,EAAK0B,QAG5C5B,aAAKC,UAAOD,EAAIC,EAAKC,EAAMC,IAC3BW,aAAMb,EAAK6B,UAAQhB,EAAIb,EAAK6B,EAAK5B,EAAMC,IACvCc,yBAAcA,EAAOf,EAAMC,IAC3BQ,sBAAWT,EAAKR,IAAIiB,IAAIR,IACxB4B,wBAAa7B,EAAKR,IAAIqC,MAAM5B,IAC5BgB,uBAAYjB,EAAKR,IAAIyB,KAAKhB"}